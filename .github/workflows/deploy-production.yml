name: Deploy to Production

on:
  push:
    branches:
      - production

env:
  AZURE_CONTAINER_REGISTRY: ineedhousing.azurecr.io
  BACKEND_APP_SERVICE: i-need-housing-backend
  CRON_APP_SERVICE: cron-job-service
  NEW_LISTINGS_SERVICE: new-listings-service
  RESOURCE_GROUP: INeedHousing

jobs:
  check-changes:
    name: Check for Changes
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.filter.outputs.backend }}
      cron-changed: ${{ steps.filter.outputs.cron_job_service }}
      new-listings-changed: ${{ steps.filter.outputs.new_listings_service }}
      keymaster-changed: ${{ steps.filter.outputs.keymaster_service }}
    
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          base: 'production'
          filters: |
            cron_job_service:
              - 'cron_job_service/**'
            backend:
              - 'backend/**'
            new_listings_service:
              - 'new_listings_service/**'
            key_master_service:
              - 'keymaster_service/**'

  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: check-changes
    if: ${{ needs.check-changes.outputs.backend-changed == 'true' }}
    environment: prod-env
    
    env:
      AZURE_CONTAINER_REGISTRY: ineedhousing.azurecr.io
      BACKEND_APP_SERVICE: i-need-housing-backend
      RESOURCE_GROUP: INeedHousing
      TENANT_ID: ${{ secrets.TENANT_ID }}
      USERNAME: ${{ secrets.USERNAME }}
      PASSWORD: ${{ secrets.PASSWORD }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          echo "Azure CLI installed"
          
      - name: Build and Push Backend Image
        run: |
          python scripts/push_backend_image.py cicd

  deploy-cron-service:
    name: Deploy Cron Job Service
    runs-on: ubuntu-latest
    needs: check-changes
    if: ${{ needs.check-changes.outputs.cron-changed == 'true' }}
    environment: prod-env
    
    env:
      AZURE_CONTAINER_REGISTRY: ineedhousing.azurecr.io
      BACKEND_APP_SERVICE: i-need-housing-backend
      RESOURCE_GROUP: INeedHousing
      TENANT_ID: ${{ secrets.TENANT_ID }}
      USERNAME: ${{ secrets.USERNAME }}
      PASSWORD: ${{ secrets.PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          echo "Azure CLI installed"

      - name: Build and Push Cron Service Image
        run: |
          python scripts/push_cron_image.py cicd

  deploy-new-listings-service:
    name: Deploy New Listings Service
    runs-on: ubuntu-latest
    needs: check-changes
    if: ${{ needs.check-changes.outputs.new-listings-changed == 'true' }}
    environment: prod-env
    
    env:
      SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      REGISTRY_NAME: ${{ secrets.REGISTRY_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Build and Push New Listings Service Image
        run: |
          python scripts/push_new_listings_image.py cicd

  deploy-keymaster-service:
    name: Deploy Key Master Service
    runs-on: ubuntu-latest
    needs: check-changes
    if: ${{ needs.check-changes.outputs.keymaster-changed == 'true' }}

    env:
      SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      REGISTRY_NAME: ${{ secrets.REGISTRY_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Build and Push New Listings Service Image
        run: |
          python scripts/push_keymaster_image.py cicd

  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs:
      [
        check-changes,
        deploy-backend,
        deploy-cron-service,
        deploy-new-listings-service,
        deploy-keymaster-service
      ]
    if: always()

    steps:
      - name: Check deployment status
        run: |
          echo "=== Deployment Summary ==="
          echo "Backend changes detected: ${{ needs.check-changes.outputs.backend-changed }}"
          echo "Cron service changes detected: ${{ needs.check-changes.outputs.cron-changed }}"
          echo "New Listings service changes detected: ${{ needs.check-changes.outputs.new-listings-changed }}"
          echo "Key Master service changes detected: ${{ needs.check-changes.outputs.keymaster-changed }}"
          echo ""
          
          # Check backend deployment status
          if [ "${{ needs.check-changes.outputs.backend-changed }}" == "true" ]; then
            if [ "${{ needs.deploy-backend.result }}" == "success" ]; then
              echo "‚úÖ INeedHousing API deployed successfully"
            else
              echo "‚ùå INeedHousing API deployment failed"
            fi
          else
            echo "‚è≠Ô∏è INeedHousing API skipped (no changes)"
          fi
          
          # Check cron service deployment status
          if [ "${{ needs.check-changes.outputs.cron-changed }}" == "true" ]; then
            if [ "${{ needs.deploy-cron-service.result }}" == "success" ]; then
              echo "‚úÖ Cron service deployed successfully"
            else
              echo "‚ùå Cron service deployment failed"
            fi
          else
            echo "‚è≠Ô∏è  Cron service skipped (no changes)"
          fi
          
          # Check new listings service deployment status
          if [ "${{ needs.check-changes.outputs.new-listings-changed }}" == "true" ]; then
            if [ "${{ needs.deploy-new-listings-service.result }}" == "success" ]; then
              echo "‚úÖ New Listings service deployed successfully"
            else
              echo "‚ùå New Listings service deployment failed"
            fi
          else
            echo "‚è≠Ô∏è  New Listings service skipped (no changes)"
          fi
          
          # Check key master service deployment status
          if [ "${{ needs.check-changes.outputs.keymaster-changed }}" == "true" ]; then
            if [ "${{ needs.deploy-keymaster-service.result }}" == "success" ]; then
              echo "‚úÖ Key Master service deployed successfully"
            else
              echo "‚ùå Key Master service deployment failed"
            fi
          else
            echo "‚è≠Ô∏è  Key Master service skipped (no changes)"
          fi
          
          echo ""
          echo "=== Final Status ==="
          
          # Determine overall success
          all_skipped=true
          any_failed=false
          
          # Check if any service had changes
          if [ "${{ needs.check-changes.outputs.backend-changed }}" == "true" ] || \
             [ "${{ needs.check-changes.outputs.cron-changed }}" == "true" ] || \
             [ "${{ needs.check-changes.outputs.new-listings-changed }}" == "true" ] || \
             [ "${{ needs.check-changes.outputs.keymaster-changed }}" == "true" ]; then
            all_skipped=false
          fi
          
          # Check for failures
          if [ "${{ needs.check-changes.outputs.backend-changed }}" == "true" ] && [ "${{ needs.deploy-backend.result }}" != "success" ]; then
            any_failed=true
          fi
          if [ "${{ needs.check-changes.outputs.cron-changed }}" == "true" ] && [ "${{ needs.deploy-cron-service.result }}" != "success" ]; then
            any_failed=true
          fi
          if [ "${{ needs.check-changes.outputs.new-listings-changed }}" == "true" ] && [ "${{ needs.deploy-new-listings-service.result }}" != "success" ]; then
            any_failed=true
          fi
          if [ "${{ needs.check-changes.outputs.keymaster-changed }}" == "true" ] && [ "${{ needs.deploy-keymaster-service.result }}" != "success" ]; then
            any_failed=true
          fi
          
          if [ "$all_skipped" == "true" ]; then
            echo "üéâ No changes detected - no deployment needed!"
            exit 0
          elif [ "$any_failed" == "false" ]; then
            echo "üéâ All required deployments completed successfully!"
            exit 0
          else
            echo "‚ùå Some deployments failed"
            exit 1
          fi