name: Deploy to Production

on:
  push:
    branches:
      - production

env:
  AZURE_CONTAINER_REGISTRY: ineedhousing.azurecr.io
  BACKEND_APP_SERVICE: i-need-housing-backend
  CRON_APP_SERVICE: cron-job-service
  NEW_LISTINGS_SERVICE: new-listings-service
  RESOURCE_GROUP: INeedHousing

jobs:
  check-changes:
    name: Check for Changes
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.filter.outputs.backend }}
      cron-changed: ${{ steps.filter.outputs.cron_job_service }}
      new-listings-changed: ${{ steps.filter.outputs.new_listings_service }}
    
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          base: 'production'
          filters: |
            cron_job_service:
              - 'cron_job_service/**'
            backend:
              - 'backend/**'
            new_listings_service:
              - 'new_listings_service/**'

  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: check-changes
    if: ${{ needs.check-changes.outputs.backend-changed == 'true' }}
    environment: prod-env
    
    env:
      AZURE_CONTAINER_REGISTRY: ineedhousing.azurecr.io
      BACKEND_APP_SERVICE: i-need-housing-backend
      RESOURCE_GROUP: INeedHousing
      TENANT_ID: ${{ secrets.TENANT_ID }}
      USERNAME: ${{ secrets.USERNAME }}
      PASSWORD: ${{ secrets.PASSWORD }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          echo "Azure CLI installed"
          
      - name: Build and Push Backend Image
        run: |
          python scripts/push_backend_image.py cicd

  deploy-cron-service:
    name: Deploy Cron Job Service
    runs-on: ubuntu-latest
    needs: [check-changes, deploy-backend]
    if: ${{ needs.check-changes.outputs.cron-changed == 'true' }}
    environment: prod-env
    
    env:
      AZURE_CONTAINER_REGISTRY: ineedhousing.azurecr.io
      BACKEND_APP_SERVICE: i-need-housing-backend
      RESOURCE_GROUP: INeedHousing
      TENANT_ID: ${{ secrets.TENANT_ID }}
      USERNAME: ${{ secrets.USERNAME }}
      PASSWORD: ${{ secrets.PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          echo "Azure CLI installed"

      - name: Build and Push Cron Service Image
        run: |
          python scripts/push_cron_image.py cicd

  deploy-new-listings-service:
    name: Deploy New Listings Service
    runs-on: ubuntu-latest
    needs: [check-changes, deploy-backend]
    if: ${{ needs.check-changes.outputs.new-listings-changed == 'true' }}
    environment: prod-env
    
    env:
      AZURE_CONTAINER_REGISTRY: ineedhousing.azurecr.io
      BACKEND_APP_SERVICE: i-need-housing-backend
      RESOURCE_GROUP: INeedHousing
      TENANT_ID: ${{ secrets.TENANT_ID }}
      USERNAME: ${{ secrets.USERNAME }}
      PASSWORD: ${{ secrets.PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          echo "Azure CLI installed"

      - name: Build and Push Cron Service Image
        run: |
          python scripts/push_new_listings_image.py cicd

  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [check-changes, deploy-backend, deploy-cron-service]
    if: always()
    
    steps:
      - name: Check deployment status
        run: |
          echo "=== Deployment Summary ==="
          echo "Backend changes detected: ${{ needs.check-changes.outputs.backend-changed }}"
          echo "Cron service changes detected: ${{ needs.check-changes.outputs.cron-changed }}"
          echo "New Listings service changes detected: ${{ needs.check-changes.outputs.new-listings-changed }}"
          echo ""
          
          # Check backend deployment status
          if [ "${{ needs.check-changes.outputs.backend-changed }}" == "true" ]; then
            if [ "${{ needs.deploy-backend.result }}" == "success" ]; then
              echo "‚úÖ Backend deployed successfully"
            else
              echo "‚ùå Backend deployment failed"
            fi
          else
            echo "‚è≠Ô∏è  Backend skipped (no changes)"
          fi
          
          # Check cron service deployment status
          if [ "${{ needs.check-changes.outputs.cron-changed }}" == "true" ]; then
            if [ "${{ needs.deploy-cron-service.result }}" == "success" ]; then
              echo "‚úÖ Cron service deployed successfully"
            else
              echo "‚ùå Cron service deployment failed"
            fi
          else
            echo "‚è≠Ô∏è  Cron service skipped (no changes)"
          fi
          
          echo ""
          echo "=== Final Status ==="
          
          # Determine overall success
          if [ "${{ needs.check-changes.outputs.backend-changed }}" == "false" ] && [ "${{ needs.check-changes.outputs.cron-changed }}" == "false" ]; then
            echo "üéâ No changes detected - no deployment needed!"
            exit 0
          elif [ "${{ needs.deploy-backend.result }}" == "success" ] || [ "${{ needs.deploy-backend.result }}" == "skipped" ]; then
            if [ "${{ needs.deploy-cron-service.result }}" == "success" ] || [ "${{ needs.deploy-cron-service.result }}" == "skipped" ]; then
              echo "üéâ All required deployments completed successfully!"
              exit 0
            else
              echo "‚ùå Some deployments failed"
              exit 1
            fi
          else
            echo "‚ùå Some deployments failed"
            exit 1
          fi